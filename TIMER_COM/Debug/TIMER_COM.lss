
TIMER_COM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000016a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000200  2**0
                  ALLOC
  3 .stab         000005a0  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000073c  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include"TIMERS.h"




int main(void){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRC|=(1<<0)|(1<<1);
  9a:	a4 e3       	ldi	r26, 0x34	; 52
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	8c 93       	st	X, r24
	PC&=0xFE;
  a8:	a5 e3       	ldi	r26, 0x35	; 53
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e5 e3       	ldi	r30, 0x35	; 53
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	8c 93       	st	X, r24
	SREG=(1<<7);
  b6:	ef e5       	ldi	r30, 0x5F	; 95
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	TIMER0_init();
  be:	0e 94 62 00 	call	0xc4	; 0xc4 <TIMER0_init>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x30>

000000c4 <TIMER0_init>:


static unit8 tick,i=1;


void TIMER0_init(void){
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
	    TCCR0 = (1<<FOC0) | (1<<CS00) |(1<<COM00);
  cc:	e3 e5       	ldi	r30, 0x53	; 83
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	81 e9       	ldi	r24, 0x91	; 145
  d2:	80 83       	st	Z, r24
	    TCNT0 = 0; //timer initial value
  d4:	e2 e5       	ldi	r30, 0x52	; 82
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
		TIMSK |= (1<<OCIE0); //enable overflow interrupt
  da:	a9 e5       	ldi	r26, 0x59	; 89
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e9 e5       	ldi	r30, 0x59	; 89
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		OCR0=250;
  e8:	ec e5       	ldi	r30, 0x5C	; 92
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8a ef       	ldi	r24, 0xFA	; 250
  ee:	80 83       	st	Z, r24



}
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <__vector_19>:


ISR(TIMER0_COMP_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	tick++;
 114:	80 91 62 00 	lds	r24, 0x0062
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 62 00 	sts	0x0062, r24
	if(tick==interrupt_per_sec){
 11e:	80 91 62 00 	lds	r24, 0x0062
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	99 f4       	brne	.+38     	; 0x14c <__vector_19+0x56>
        PC=(1<<i);
 126:	e5 e3       	ldi	r30, 0x35	; 53
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 91 60 00 	lds	r24, 0x0060
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <__vector_19+0x46>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <__vector_19+0x42>
 140:	80 83       	st	Z, r24
        i--;
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	81 50       	subi	r24, 0x01	; 1
 148:	80 93 60 00 	sts	0x0060, r24

	}

}
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
