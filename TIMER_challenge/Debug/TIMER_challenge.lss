
TIMER_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001e0  2**0
                  ALLOC
  2 .stab         000005c4  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000073f  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include"TIMERS.h"




int main(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRC=0x0F;
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	80 83       	st	Z, r24
	PORTC&=0xF0;
  8c:	a5 e3       	ldi	r26, 0x35	; 53
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	e5 e3       	ldi	r30, 0x35	; 53
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 7f       	andi	r24, 0xF0	; 240
  98:	8c 93       	st	X, r24
	SREG|=(1<<7);/* enable global Ibit "interrupt"*/
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24
	TIMER0_init();
  a8:	0e 94 57 00 	call	0xae	; 0xae <TIMER0_init>
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x30>

000000ae <TIMER0_init>:
 static unit8 g_tick;
 static unit8 num=0;



void TIMER0_init(void){
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
#ifdef NORMAL_MODE
	    TCNT0 = 0; //timer initial value
  b6:	e2 e5       	ldi	r30, 0x52	; 82
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
		TIMSK |= (1<<TOIE0); //enable overflow interrupt
  bc:	a9 e5       	ldi	r26, 0x59	; 89
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e9 e5       	ldi	r30, 0x59	; 89
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0 = (1<<FOC0) | (1<<CS02) ;//| (1<<CS00);
  ca:	e3 e5       	ldi	r30, 0x53	; 83
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 83       	st	Z, r24


}
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <__vector_9>:
#endif

ISR(TIMER0_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62

	g_tick++;
  f6:	80 91 61 00 	lds	r24, 0x0061
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 61 00 	sts	0x0061, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
 100:	80 91 61 00 	lds	r24, 0x0061
 104:	8b 37       	cpi	r24, 0x7B	; 123
 106:	19 f5       	brne	.+70     	; 0x14e <__vector_9+0x76>
	{
		if(PORT_check_lower(PC,9)){
 108:	e5 e3       	ldi	r30, 0x35	; 53
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	90 70       	andi	r25, 0x00	; 0
 116:	89 30       	cpi	r24, 0x09	; 9
 118:	91 05       	cpc	r25, r1
 11a:	94 f4       	brge	.+36     	; 0x140 <__vector_9+0x68>
		   num++;
 11c:	80 91 60 00 	lds	r24, 0x0060
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 60 00 	sts	0x0060, r24
		   PORT_equal(PC,num);
 126:	a5 e3       	ldi	r26, 0x35	; 53
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e5 e3       	ldi	r30, 0x35	; 53
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	98 2f       	mov	r25, r24
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	80 91 60 00 	lds	r24, 0x0060
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	8c 93       	st	X, r24
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_9+0x72>
		}
		else{
			num=0;
 140:	10 92 60 00 	sts	0x0060, r1
			PC=0;
 144:	e5 e3       	ldi	r30, 0x35	; 53
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 82       	st	Z, r1
		}

		g_tick = 0; //clear the tick counter again to count a new  second
 14a:	10 92 61 00 	sts	0x0061, r1
	}
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
