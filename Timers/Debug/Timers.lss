
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000218  2**0
                  ALLOC
  2 .stab         0000075c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000780  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_on_PL>:
}
#endif

#ifdef Postive_logic

void LED_on_PL(){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	Pin_output(port,pin);
  84:	a5 e3       	ldi	r26, 0x35	; 53
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e5 e3       	ldi	r30, 0x35	; 53
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	8c 93       	st	X, r24
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <LED_off_PL>:



void LED_off_PL(void){
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	Pin_clear(port,pin);
  a0:	a5 e3       	ldi	r26, 0x35	; 53
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <LED_toggle_PL>:




void LED_toggle_PL(){
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	Pin_toggle(port,pin);
  bc:	a5 e3       	ldi	r26, 0x35	; 53
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	89 27       	eor	r24, r25
  ca:	8c 93       	st	X, r24


}
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <main>:
#include"TIMERS.h"




int main(void){
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	Direction_output(Direction_C,0);
  da:	a4 e3       	ldi	r26, 0x34	; 52
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e4 e3       	ldi	r30, 0x34	; 52
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	8c 93       	st	X, r24
	Pin_clear(PC,0);
  e8:	a5 e3       	ldi	r26, 0x35	; 53
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e5 e3       	ldi	r30, 0x35	; 53
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	8c 93       	st	X, r24
	SREG|=(1<<7);/* enable global Ibit "interrupt"*/
  f6:	af e5       	ldi	r26, 0x5F	; 95
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	ef e5       	ldi	r30, 0x5F	; 95
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	8c 93       	st	X, r24
	TIMER0_init();
 104:	0e 94 85 00 	call	0x10a	; 0x10a <TIMER0_init>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x36>

0000010a <TIMER0_init>:

 static unit8 g_tick;



void TIMER0_init(void){
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
#ifdef NORMAL_MODE
	    TCNT0 = 12; //timer initial value
 112:	e2 e5       	ldi	r30, 0x52	; 82
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	80 83       	st	Z, r24
		TIMSK |= (1<<TOIE0); //enable overflow interrupt
 11a:	a9 e5       	ldi	r26, 0x59	; 89
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e9 e5       	ldi	r30, 0x59	; 89
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
 128:	e3 e5       	ldi	r30, 0x53	; 83
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	85 e8       	ldi	r24, 0x85	; 133
 12e:	80 83       	st	Z, r24


}
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <__vector_9>:
#endif

ISR(TIMER0_OVF_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
 160:	80 91 60 00 	lds	r24, 0x0060
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 60 00 	sts	0x0060, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_HALF_SECOND)
 16a:	80 91 60 00 	lds	r24, 0x0060
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	21 f4       	brne	.+8      	; 0x17a <__vector_9+0x44>
	{
	    LED_toggle_PL(); //toggle led every 0.5 second
 172:	0e 94 5a 00 	call	0xb4	; 0xb4 <LED_toggle_PL>
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
 176:	10 92 60 00 	sts	0x0060, r1
	}
}
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
